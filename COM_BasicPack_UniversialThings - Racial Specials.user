<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <loadonce key="COM_BasicPack_UniversialAbilities - Racial Specials"/>
  <fileinfo>
    <info_author><![CDATA[
Tim Shadow
shadowchemosh@yahoo.com
January 7, 2011

This file is designed to hold all those "Universal Monster" abilities like DR or other abilities that can be used more across all the different monsters.]]></info_author>
    <info_history><![CDATA[
**Please name new "Abilities" like DR or Immunity with "xx" please**

May 18, 2014 - Tim Shadow
-Created new "Demon Lord Traits" so B4 is not needed.
-Created new "Nascent Demon Lord Traits" so B4 is not needed.
-Merged over Frumple's new additions:
id="xCBBldDra"  name="Blood Drain"
id="xxUndeadIm" name="Undead Immunities"
id="xCBBreathW" name="Breath Weapon"
id="xCBBurn"    name="Burn"
id="xCBAirMast" name="Air Mastery"
id="xCBErthMas" name="Earth Mastery"
id="xCBFieryAu" name="Fiery Aura"
id="xCBWatMast" name="Water Mastery"
id="xCBDrench"  name="Drench"
id="xCBParalys" name="Paralysis"
id="xCBEnrgDr"  name="Energy Drain"
id="xCBPound"   name="Pound"
id="xCBAcidDm"  name="Acid Damage"
id="xCBLifeSen" name="Lifesense"
id="xCBOgreBl"  name="Ogre Blood"
id="xCBEngulf"  name="Engulf"
id="xCBSwallow" name="Swallow Whole"
id="xCBCreaSpw" name="Create Spawn"
id="xCBFireDm"  name="Fire Damage"
id="xCBElecDm"  name="Electricity Damage"
id="xCBColdDm"  name="Cold Damage"
id="xCBSonicDm" name="Sonic Damage"
id="xCBBleed"   name="Bleed"
id="xCBHeat"    name="Heat"
id="xCBCold"    name="Cold"
id="xCBOrcBl" name="Orc Blood"
id="xCBSplit" name="Split"
id="xCBAbilDra" name="Ability Drain"
id="xCBStench" name="Stench"
id="xxImmMadne" name="Immune to Madness"
id="xxVulnRust" name="Vulnerability to Rust"
id="xCBFearAur" name="Fear Aura"
id="xCBSummon" name="Summon"
id="xCBMyIncSw" name="Increased Swarm Damage"


March 29, 2014 - Tim Shadow 
-Added "Immune to Pain" thingid.xxImmPain after Pathfinder v9.0 removed tmPFRSPain racial special.

May 13, 2013 - Tim Shadow
-Merged over "rauIcewalk" and "raxBlooDra".

March 6, 2013 - Tim Shadow
-Moved all the xx abilities over to the Univesial Abilities file (PFRPG_Bestiary_UniversialAbilities.user).
--xxTelepMil,xxDRLawrMg,xxImmMagMi,xxImmMagCo,xxVulLight,xxImmScent
--Removed xxImmMagCo as I found its not used a duplicate of xxImmContr

December 31, 2012 - Tim Storen
-Changed xImmContro to xxImmContr so that Campaign Setting#6 is not needed.
-Changed xABImmDise to xxImmMaDis and changed name to be "Immunity to Magical Diseases".
-Changed xS2ImGaz2 to xxImmGaze and changed name to be "Immunity to Gaze Attacks".
-Removed xS2DRBlMa as no longer needed.
-Removed xS2DRGoPi as no longer needed.

December 11, 2012 - Tim Storen
-Removed source mark from xxSelfRepa thing as it should not be source marked. Found when creating the Player Pack data set.

Oct 22, 2012 - Jeff Hersh
Added new poisons. These work like the generic raPoiSTR, etc poisons but developer now has control on how many damage dice are done and the ability to add extra damage as text.

abValue: type of damage dice
abValue2: number of saves
abValue3: number of damage dice
adDuration: length of poison duration
abText: additional damage text

All of these new poisons have the id tags of the format xxPoi(Ability).

Oct 3, 2012 - Jeff Hersh
Rooted out some duplicates
Updated Skill Bonuses to handle #situational macro
Added new Cold and Heat abilities that allow the user to specify the amount of damage via the abValue fields.

September 18, 2012 - Tim Shadow
-Merged over Unversial Monster abilities stuff from "PFRPG_Tome_of_Horrors_frumple.user" to here.
    
August 5, 2012 - Tim Shadow
-Merged in Frumple stuff: xAmorphous
-Added thingid.raS2SwamCr (Swamp Crumble) which is to be used in place of "thingd.raMummSwC" so that Campaign Setting#3 is not needed.
-Added thingid.xS2ImGaz2 (Immunity to Gaze) which is to be used in place of thingid.xImmGaze2 so that campaign setting#6 is not needed.
-Added thingid.fS2ChrRigh (Charge of the Righteous) which is used in place of thingid.fChrgRight so that Golarion Companion#1 is not needed.
    
June 24, 2012 - Tim Shadow
-Merged in Brodin's CoT Bestiary stuff: xCTImmDism; xABImmDise

March 30, 2012 - Jeff Hersh
Added adjustment that effects the abilities of lycanthropes in hybrid or animal form.

March 20, 2012 - jeff Hersh
Added vulnerabilities to magic schools.

Feb 21, 2012 - Jeff Hersh
Modified Skill Bounus for Craft, Knowledge, Perform and Profession. User can now select speficic skilltype in Background tab.

Feb 11, 2012 - Jeff hersh
- added save bonus things for each save. They work like the individual skill bonus things.

Feb 3, 2012 - Tim Shadow
-Merged in frumple's Skill Bonuses things from "PFRPG_Frumple_bonuses.user".
-Duplicated Berserk(thingid.raAFGBersk) and Open Mind(thingid.raAFGOMind) so that Campaign Setting #3 not needed.
-Duplicated  'spBuGlory4' Burst of Glory(Spell) and 'spGhoHun2'  Ghoul Hunger(Spell) from Campaign Setting #1.
-Duplicated 'raWiDDehyd' Resurrection Vulnerability(RaceSpec) -> raS2DDehyd from Campaign Setting #5.

January 7, 2011 - Tim Shadow
-Add "Damage Reduction Bludgeoning and Magic", "Damage Reduction, Good and piercing".]]></info_history>
    </fileinfo>
  <thing id="raS2Berser" name="Berserk" description="When a flesh golem enters combat, there is a cumulative 5% chance each round that its elemental spirit breaks free and the golem goes berserk. The uncontrolled golem goes on a rampage, attacking the nearest living creature or smashing some object smaller than itself if no creature is within reach, then moving on to spread more destruction. The golem&apos;s creator, if within 60 feet, can try to regain control by speaking firmly and persuasively to the golem, which requires successful Intimidate check, but the golem gets a Will save (DC equal to the creator&apos;s Intimidate result) to resist.  It takes 1 minute of inactivity by the golem to reset the golem&apos;s berserk chance to 0%.\n\nAn intelligent golem also has a higher chance of going berserk. An awakened golem has a cumulative 5% chance each round to go berserk during combat. The golem&apos;s creator, if within 60 feet, can try to regain control of the awakened golem, which requires a successful Intimidate check, but the golem gets a Will save (DC equal to creator&apos;s Intimidate result) to resist. It takes 1 minute of inactivity by the golem to reset the golem&apos;s berserk chance to 0%." compset="RaceSpec">
    <comment>Duplicated from raAFGBersk(Berserk) from Campaign Setting#3.</comment>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SpecType" tag="Attack"/>
    </thing>
  <thing id="raS2DDehyd" name="Resurrection Vulnerability" description="While a wight lord is vulnerable to resurrection magic, it isn&apos;t quite as vulnerable as a typical wight. A {i}raise dead{/i} or similar spell cast on a wight lord staggers it for 1d6+1 rounds if it fails a Will save, but does not destroy the wight. Using the spell in this way does not require a material component." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="raS2OMind" name="Open Mind" description="Unlike other constructs, awakened flesh golems are susceptible to mind-affecting effects (charms, compulsions, phantasms, patterns, and morale effects)." compset="RaceSpec">
    <comment>Duplicated from raAFGOMind from Campaign Setting#3.</comment>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="raS2SwamCr" name="Swamp Crumble" description="Curse and disease-slam; save Fort DC 16; onset 1 minute; frequency 1/day; effect 1d3 Dec, 1d3 Con and 1d3 Cha; cure -. Swamp crumble is both a curse and disease and can only be cured if the curse is first removed, at which point the disease can be magically removed. Even after the curse element of swamp crumble is lifted, a creature suffering from it cannot recover naturally over time. Anyone casting a conjuration (healing) spell on the afflicted creature must succeed on a DC 20 caster level check, or the spell is wasted and the healing has no effect. Anyone who dies from crumble turns to dust and cannot be raised without a resurrection or greater magic. The save DC is Charisma-based.\n\nTypically transmitted only by mummies created by bog burial, the disease causes the victim&apos;s bones to become brittle and dissolve; upon death, only the skin, internal organs, and other soft tissues remain. A side effect of swamp crumble is the victim&apos;s hair becomes tinged with red, with light-colored hair turning as red as fresh blood." compset="RaceSpec">
    <comment>Tim Shadow so that Campaign Setting3 is not needed for raMummSwC</comment>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="StandardDC" tag="aCHA"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="rauCold" name="Cold" description="The creature generates intense cold that its mere touch deals additional cold damage. The creature&apos;s metallic melee weapons also conduct this cold." compset="RaceSpec">
    <comment>This version of cold allows user to select the amount of cold damage.  Defualts to 1d6. Type number of dice damage in the abValue field. Type type of dice in the abValue2 field</comment>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="Final" priority="10000"><![CDATA[
      var noDice as number
      var typDice as number
      var damStr as string

      noDice = field[abValue].value
      typDice = field[abValue2].value

      ~ defaults to 1d6
      if (noDice = 0) then 
         noDice = 1
      endif
      if (typDice = 0) then
         typDice = 6
      endif

      damStr = noDice &"d"& typDice

      ~find all our melee weapons that are unarmed attacks, natural attacks, or
      ~metal weapons - each gets fire damage
      foreach pick in hero from BaseWep where "wCategory.Melee & (wCategory.Unarmed | component.BaseNatWep | EquipType.Metal)"
        #extradamage[eachpick,"+" & damStr & " cold",field[name].text]
      nexteach

      field[livename].text = "Cold (" & damStr & ")"]]></eval>
    </thing>
  <thing id="rauHeat" name="Heat" description="The creature generates so much heat that its mere touch deals additional fire damage. The creature&apos;s metallic melee weapons also conduct this heat." compset="RaceSpec">
    <comment>This version of heat allows user to select the amount of fire damage.  Defaults to 1d6. Type number of dice damage in the abValue field. Type type of dice in the abValue2 field</comment>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="Final" priority="10000"><![CDATA[
      var noDice as number
      var typDice as number
      var damStr as string

      noDice = field[abValue].value
      typDice = field[abValue2].value

      ~ defaults to 1d6
      if (noDice = 0) then 
         noDice = 1
      endif
      if (typDice = 0) then
         typDice = 6
      endif

      damStr = noDice &"d"& typDice

      ~find all our melee weapons that are unarmed attacks, natural attacks, or
      ~metal weapons - each gets fire damage
      foreach pick in hero from BaseWep where "wCategory.Melee & (wCategory.Unarmed | component.BaseNatWep | EquipType.Metal)"
        #extradamage[eachpick,"+" & damStr & " fire",field[name].text]
      nexteach

      field[livename].text = "Heat (" & damStr & ")"]]></eval>
    </thing>
  <thing id="rauPlantse" name="Plantsense" description="Creature can automatically pinpoint the location of anything within 120 feet that is in contact with vegetation." compset="RaceSpec" summary="Sense things and creatures in contact with vegetation." uniqueness="unique">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Sense" name="Sense" abbrev="Sense"/>
    <eval phase="Final" priority="10000">call CalcValue</eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[
      ~ Use our value field as sense distance
      field[livename].text = field[name].text & " (" & field[abValue].value & " ft.)"]]></eval>
    </thing>
  <thing id="rauQlipLor" name="Qlippoth Lord Abilities" description="A qlippoth lord is a powerful and unique qlippoth that rules a significant portion of an Abyssal realm. Qlippoth lords possess the following traits.\n\nImmunity to cold, death effects, mind-affecting effects, and poison.\n\nResistance to acid 30, electricity 30, and fire 30.\n\nHorrific Appearance (Su) This ability functions similarly to the typical qlippoth ability, save that qlippoth lords&apos; horrific appearances often create physical effects and changes in their victims. Despite these physical effects, a qlippoth lord&apos;s horrific appearance remains a mind-affecting effect.\n\nSummon Qlippoth (Sp) Once per day, a qlippoth lord can summon any qlippoth or combination of qlippoth whose total combined CR is 20 or lower. This ability always works, and is equivalent to a 9th-level spell.\n\nTelepathy 300 feet.\n\nA qlippoth lord&apos;s natural weapons, as well as any weapon it wields, are treated as chaotic, epic, and evil for the purpose of overcoming damage reduction.\n\nQlippoth lords can grant spells to their worshipers. Granting spells does not require any specific action on the qlippoth lord&apos;s behalf. All qlippoth lords grant access to the domains of Chaos and Evil; in addition, they grant access to two other domains and a favored weapon that vary according to each qlippoth lord&apos;s themes and interests." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <bootstrap thing="xImmCold"></bootstrap>
    <bootstrap thing="xImmDeath"></bootstrap>
    <bootstrap thing="xImmMind"></bootstrap>
    <bootstrap thing="xImmPois"></bootstrap>
    <bootstrap thing="xDamRsAcid">
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <bootstrap thing="xDamRsElec">
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <bootstrap thing="xDamRsFire">
      <autotag group="Value" tag="30"/>
      </bootstrap>
    <bootstrap thing="xTelepathy">
      <autotag group="Value" tag="300"/>
      </bootstrap>
    </thing>
  <thing id="xBonusAcro" name="Skill Bonus: Acrobatics" description="Bonus to Acrobatics checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty, livename: bonus text, abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[
      var curSkill as string
      curSkill = "Acrobatics"

      call TotalValue

      ~ Use our value field as the bonus
      if (compare(field[livename].text,field[name].text) <> 0) then
        #skillbonus[skAcrobat] += signed(field[abValue].value)
        field[livename].text = signed(field[abValue].value) & " " & curSkill
      else
        #situational[hero.child[skAcrobat],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
        field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      endif]]></eval>
    </thing>
  <thing id="xBonusAppr" name="Skill Bonus: Appriase" description="Bonus to Appraise checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Appraise"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skAppraise] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skAppraise],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusBluf" name="Skill Bonus: Bluff" description="Bonus to Bluff checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Bluff"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skBluff] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skBluff],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusClim" name="Skill Bonus: Climb" description="Bonus to Climb checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Climb"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skClimb] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skClimb],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusCraf" name="Skill Bonus: Craft" description="Racial bonus to specific Craft skill." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatCraft"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Custom" tag="SituBonus"/>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

~ render labels

~ variables
  var len as number

  len = length(field[livename].text) - (length(field[usrChosen1].chosen.field[name].text) + 3)

  field[livename].text = left(field[livename].text,len)
  field[shortname].text = field[livename].text]]></eval>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

var curSkill as string
curSkill = field[usrChosen1].chosen.field[name].text

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus
     field[usrChosen1].chosen.field[Bonus].value += signed(field[abValue].value)
     field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus
    #situational[field[usrChosen1].chosen,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
    field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusCrAl" name="Skill Bonus: Craft (all)" description="Bonus to all Craft checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)

var curSkill as string
curSkill = "Craft (all)"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatCraft"
  eachpick.field[Bonus].value += signed(field[abValue].value)
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatCraft"
  #situational[eachpick,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif

field[shortname].text = field[livename].text]]></eval>
    </thing>
  <thing id="xBonusDipl" name="Skill Bonus: Diplomacy" description="Bonus to Diplomacy checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Diplomacy"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skDiplo] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skDiplo],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusDisg" name="Skill Bonus: Disguise" description="Bonus to Disguise checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Disguise"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skDisguise] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skDisguise],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusDsDv" name="Skill Bonus: Disable Device" description="Bonus to Disable Device checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Disable Device"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skDisable] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skDisable],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusEsAr" name="Skill Bonus: Escape Artist" description="Racial bonus to Escape Artist checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Escape Artist"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skEscape] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skEscape],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusFly" name="Skill Bonus: Fly" description="Racial bonus to Fly checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Fly"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skFly] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skFly],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusFort" name="Save Bonus: Fortitude" description="Bonus/penaty to Fortiude saves." compset="RaceSpec">
    <tag group="Hide" tag="Special"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[
call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      field[livename].text = signed(field[abValue].value) & " Fortitude"
      if (field[abValue].value >= 0) then
         hero.child[svFort].field[Bonus].value += field[abValue].value
      else
         hero.child[svFort].field[Penalty].value += field[abValue].value
      endif
   else
      ~field[livename].text = signed(field[abValue].value) & " Fortitude save vs. " & field[livename].text
      #situational[hero.child[svFort],signed(field[abValue].value) & " vs. " & field[livename].text,field[name].text]
   endif]]></eval>
    </thing>
  <thing id="xBonusHaAn" name="Skill Bonus: Handle Animal" description="Racial bonus to Handle Animal checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Handle Animal"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skHandleAn] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skHandleAn],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusHeal" name="Skill Bonus: Heal" description="Racial bonus to Heal checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Heal"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skHeal] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skHeal],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusInti" name="Skill Bonus: Intimidate" description="Racial bonus to Intimidate checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Intimidate"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skIntim] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skIntim],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusKnAl" name="Skill Bonus: Knowledge (all)" description="Racial bonus to all Knowledge checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)

var curSkill as string
curSkill = "Knowledge (all)"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatKnow"
  eachpick.field[Bonus].value += signed(field[abValue].value)
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatKnow"
  #situational[eachpick,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif

field[shortname].text = field[livename].text]]></eval>
    </thing>
  <thing id="xBonusKnow" name="Skill Bonus: Knowledge" description="Racial bonus to specific Knowledge skill." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatKnow"/>
    <fieldval field="abText" value="Racial"/>
    <tag group="SpecType" tag="Skill"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Custom" tag="SituBonus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

var curSkill as string
curSkill = field[usrChosen1].chosen.field[name].text

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus
     field[usrChosen1].chosen.field[Bonus].value += signed(field[abValue].value)
     field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus
    #situational[field[usrChosen1].chosen,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
    field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

~ render labels

~ variables
  var len as number

  len = length(field[livename].text) - (length(field[usrChosen1].chosen.field[name].text) + 3)

  field[livename].text = left(field[livename].text,len)
  field[shortname].text = field[livename].text]]></eval>
    </thing>
  <thing id="xBonusLing" name="Skill Bonus: Linguistics" description="Racial bonus to Linguistics checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Linguistics"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skLinguist] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skLinguist],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusPerA" name="Skill Bonus: Perform (all)" description="Racial bonus to all Perform checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)

var curSkill as string
curSkill = "Perform (all)"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatPerf"
  eachpick.field[Bonus].value += signed(field[abValue].value)
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatPerf"
  #situational[eachpick,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif

field[shortname].text = field[livename].text]]></eval>
    </thing>
  <thing id="xBonusPerc" name="Skill Bonus: Perception" description="Racial bonus to Perception checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Perception"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skPercep] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skPercep],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusPerf" name="Skill Bonus: Perform" description="Racial bonus to specific Perform skill." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatPerf"/>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Custom" tag="SituBonus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

~ render labels

~ variables
  var len as number

  len = length(field[livename].text) - (length(field[usrChosen1].chosen.field[name].text) + 3)

  field[livename].text = left(field[livename].text,len)
  field[shortname].text = field[livename].text]]></eval>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

var curSkill as string
curSkill = field[usrChosen1].chosen.field[name].text

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus
     field[usrChosen1].chosen.field[Bonus].value += signed(field[abValue].value)
     field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus
    #situational[field[usrChosen1].chosen,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
    field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusProA" name="Skill Bonus: Profession (all)" description="Racial bonus to all Profession checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)

var curSkill as string
curSkill = "Profession (all)"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatProf"
  eachpick.field[Bonus].value += signed(field[abValue].value)
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus

foreach pick in hero from BaseSkill where "Helper.SkCatProf"
  #situational[eachpick,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
nexteach

field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif

field[shortname].text = field[livename].text]]></eval>
    </thing>
  <thing id="xBonusProf" name="Skill Bonus: Profession" description="Racial bonus to specific Profession skill." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text 
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatProf"/>
    <tag group="SpecType" tag="Skill"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Custom" tag="SituBonus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

var curSkill as string
curSkill = field[usrChosen1].chosen.field[name].text

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
~ non-situational bonus
     field[usrChosen1].chosen.field[Bonus].value += signed(field[abValue].value)
     field[livename].text = signed(field[abValue].value) & " " & curSkill
      
   else
~situational bonus
    #situational[field[usrChosen1].chosen,signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
    field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)
  doneif (field[usrChosen1].ischosen = 0)

~ render labels

~ variables
  var len as number

  len = length(field[livename].text) - (length(field[usrChosen1].chosen.field[name].text) + 3)

  field[livename].text = left(field[livename].text,len)
  field[shortname].text = field[livename].text]]></eval>
    </thing>
  <thing id="xBonusRefl" name="Save Bonus: Reflex" description="Bonus/penaty to Reflex saves." compset="RaceSpec">
    <tag group="Hide" tag="Special"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[
call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      field[livename].text = signed(field[abValue].value) & " Reflex"
      if (field[abValue].value >= 0) then
         hero.child[svRef].field[Bonus].value += field[abValue].value
      else
         hero.child[svRef].field[Penalty].value += field[abValue].value
      endif
   else
      ~field[livename].text = signed(field[abValue].value) & " Reflex save vs. " & field[livename].text
      #situational[hero.child[svRef],signed(field[abValue].value) & " vs. " & field[livename].text,field[name].text]
   endif]]></eval>
    </thing>
  <thing id="xBonusRide" name="Skill Bonus: Ride" description="Racial bonus to Ride checks" compset="RaceSpec">
    <comment>abValue: signed bonus/penalty
livename: bonus text</comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Ride"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skRide] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skRide],signed(field[abValue].value) & "  " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusSave" name="Save Bonus: All" description="Bonus/Penalty to all saves" compset="RaceSpec">
    <tag group="Hide" tag="Special"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[
call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      field[livename].text = signed(field[abValue].value) & " all saves"
      if (field[abValue].value >= 0) then
         hero.child[svAll].field[Bonus].value += field[abValue].value
      else
         hero.child[svAll].field[Penalty].value += field[abValue].value
      endif
   else
      
      #situational[hero.child[svAll],signed(field[abValue].value) & " vs. " & field[livename].text,field[name].text]
   endif]]></eval>
    </thing>
  <thing id="xBonusSlgH" name="Skill Bonus: Sleight of Hand" description="Racial bonus to Sleight of Hand checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Sleight of Hand"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skSleight] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skSleight],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusSnsM" name="Skill Bonus: Sense Motive" description="Racial bonus to Sense Motive checks" compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Sense Motive"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skSenseMot] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skSenseMot],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusSpel" name="Skill Bonus: Spellcraft" description="Racial bonus to Spellcraft checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Spellcraft"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skSpellcr] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skSpellcr],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusStea" name="Skill Bonus: Stealth" description="Racial bonus to Stealth checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Stealth"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skStealth] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skStealth],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusSurv" name="Skill Bonus: Survival" description="Racial bonus to Survival checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Survival"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skSurvival] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skSurvival],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusSwim" name="Skill Bonus: Swim" description="Racial bonus to Swim checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Swim"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skSwim] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skSwim],signed(field[abValue].value) & "  " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusUMDv" name="Skill Bonus: Use Magic Device" description="Racial bonus to Use Magic Device checks." compset="RaceSpec">
    <comment><![CDATA[abValue: signed bonus/penalty
livename: bonus text
abText: bonus type "Racial" is default]]></comment>
    <fieldval field="abText" value="Racial"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Skill"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[var curSkill as string
curSkill = "Use Magic Device"

call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      #skillbonus[skUseMagic] += signed(field[abValue].value)
      field[livename].text = signed(field[abValue].value) & " " & curSkill
   else
      #situational[hero.child[skUseMagic],signed(field[abValue].value) & " " & field[livename].text,field[abText].text]
      field[livename].text = signed(field[abValue].value) & " " & curSkill & " " & field[livename].text
      
endif]]></eval>
    </thing>
  <thing id="xBonusWill" name="Save Bonus: Will" description="Bonus/penaty to Will saves." compset="RaceSpec">
    <tag group="Hide" tag="Special"/>
    <eval phase="PreLevel" priority="4000"><![CDATA[
call TotalValue

~ Use our value field as the bonus
   if (compare(field[livename].text,field[name].text) <> 0) then
      field[livename].text = signed(field[abValue].value) & " Will"
      if (field[abValue].value >= 0) then
         hero.child[svWill].field[Bonus].value += field[abValue].value
      else
         hero.child[svWill].field[Penalty].value += field[abValue].value
      endif
   else
      ~field[livename].text = signed(field[abValue].value) & " Will save vs. " & field[livename].text
      #situational[hero.child[svWill],signed(field[abValue].value) & " vs. " & field[livename].text,field[name].text]
   endif]]></eval>
    </thing>
  <thing id="xxPoiALL" name="Poison - ALL Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Custom" tag="Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " to all stats" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 to all stats" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; cure 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; cure " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiALL].amendthing[name,field[livename].text]

~ add abSumm to description. If descript is not empty prepend poison stats before text

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiALL].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiALL].amendthing[description,state.thing[xxPoiALL].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiALL,descCurr]
  endif
else
  perform state.thing[xxPoiALL].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxPoiCHA" name="Poison - CHA Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="Custom" tag="Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " Cha" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 Cha" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; {i}cure{/i} 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; {i}cure{/i} " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiCHA].amendthing[name,field[livename].text]

~ add abSumm to description. If descript is not empty prepend poison stats before text

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiCHA].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiCHA].amendthing[description,state.thing[xxPoiCHA].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiCHA,descCurr]
  endif
else
  perform state.thing[xxPoiCHA].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxPoiCON" name="Poison - CON Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="Custom" tag="Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " Con" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 Con" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; {i}cure{/i} 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; {i}cure{/i} " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiCON].amendthing[name,field[livename].text]

~ add abSumm to description. If descript is not empty prepend poison stats before text

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiCON].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiCON].amendthing[description,state.thing[xxPoiCON].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiCON,descCurr]
  endif
else
  perform state.thing[xxPoiCON].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxPoiDEX" name="Poison - DEX Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="Custom" tag="Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " Dex" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 Dex" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; {i}cure{/i} 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; {i}cure{/i} " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiDEX].amendthing[name,field[livename].text]

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiDEX].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiDEX].amendthing[description,state.thing[xxPoiDEX].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiDEX,descCurr]
  endif
else
  perform state.thing[xxPoiDEX].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxPoiINT" name="Poison - INT Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="Custom" tag="Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " Int" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 Int" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; {i}cure{/i} 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; {i}cure{/i} " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiINT].amendthing[name,field[livename].text]

~ add abSumm to description. If descript is not empty use #appenddesc

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiINT].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiINT].amendthing[description,state.thing[xxPoiINT].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiINT,descCurr]
  endif
else
  perform state.thing[xxPoiINT].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxPoiSTR" name="Poison - STR Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Custom" tag="Break" name="Line Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " Str" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 Str" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; {i}cure{/i} 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; {i}cure{/i} " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiSTR].amendthing[name,field[livename].text]

~ add abSumm to description. If descript is not empty prepend poison stats before text

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiSTR].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiSTR].amendthing[description,state.thing[xxPoiSTR].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiSTR,descCurr]
  endif
else
  perform state.thing[xxPoiSTR].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxPoiWIS" name="Poison - WIS Damage" compset="RaceSpec">
    <comment><![CDATA[Modified version of poisons to allow for changing of number of dice damage and more freedom is how the poison is displayed.

abValue: die type of damage
abValue2: number of saves
abValue3: number of dice of damage
abDuration: number of rounds
abText: extra damage specified by text

when bootstrapping the livename field is used to specify the weapon and type of poison in the format: WEAPON-TYPE

additionally if the poison has additional text the creature needs to specify it via the poison's field[descript].text field before Final Phase/20000

Delete the tag Custom.Break (before Final/20000) in the poison if you do not want a line break between the poison stats and any extra text.]]></comment>
    <fieldval field="abValue2" value="1"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="Custom" tag="Break"/>
    <tag group="Custom" tag="Poison"/>
    <eval phase="Final" priority="20000"><![CDATA[~ default abValue3 to 1
if (field[abValue3].value < 1) then
   field[abValue3].value = 1
endif

~ livename is used to store point attack and poison 
~  type (injury etc) in the form "Weapon-Type"



if (compare(field[livename].text, field[name].text) = 0) then
    field[abSumm].text = field[livename].text & "; "
else
    field[abSumm].text = "Poison; "
endif


if (field[abValue].value > 1) then
   field[abSumm].text &= "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} " & field[abValue3].value & "d" & field[abValue].value & " Wis" & field[abText].text

elseif (field[abValue].value = 1) then
   field[abSumm].text &=  "{i}frequency{/i} 1/round for " & field[abDuration].value & " rounds; {i}effect{/i} 1 Wis" & field[abText].text 
endif

if (field[abValue2].value = 1) then
        field[abSumm].text &= "; {i}cure{/i} 1 save."
      elseif (field[abValue2].value > 1) then
        field[abSumm].text &= "; {i}cure{/i} " & field[abValue2].value & " consecutive saves."
        endif

~ set livename to just poison

field[livename].text = "Poison"
perform state.thing[xxPoiWIS].amendthing[name,field[livename].text]

~ add abSumm to description. If descript is not empty prepend poison stats before text

if (empty(field[descript].text) = 0) then
   var descCurr as string
   descCurr = field[descript].text
   perform state.thing[xxPoiWIS].amendthing[description,field[abSumm].text]
   if (tagcount[Custom.Break] = 0) then
      perform state.thing[xxPoiWIS].amendthing[description,state.thing[xxPoiWIS].field[descript].text & " " & descCurr]
   else
   #appenddesc[xxPoiWIS,descCurr]
  endif
else
  perform state.thing[xxPoiWIS].amendthing[description,field[abSumm].text]
endif]]></eval>
    </thing>
  <thing id="xxDisFilth" name="Disease, Filth Fever" description="Filth Fever - {b}Type{/b} disease, injury; {b}Save{/b} Fortitude DC 12; {b}Onset{/b} 1d3 days; {b}Frequency{/b} 1/day; {b}Effect{/b} 1d3 Dex damage and 1d3 Con damage; {b}Cure{/b} 2 consecutive saves" compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="Final" priority="10000"><![CDATA[      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~if we have a selected weapon, then add " plus disease" to the selected weapon
      call fTargetFoc
      if (state.isfocus <> 0) then
        #extradamage[focus," plus disease",field[name].text]
        endif]]></eval>
    <eval phase="First" priority="10000" index="2"><![CDATA[
      ~if we're an ability on a custom monster, we'll need to allow the user to
      ~select the particular attack we're tied to
      if (hero.tagis[RaceType.CustomMon] <> 0) then
        perform assign[fShowWhat.WeaponsNat]
        endif]]></eval>
    </thing>
  <thing id="rcuAOSwWhl" name="Swallow Whole" description="The object gains the swallow whole special attack (the object must have a bite attack before it can take this ability). Any creature swallowed by the object takes 1d6 points of fire damage each round." compset="RaceCustom" uniqueness="useronce">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="AllowRCust" tag="rAnimObjec" name="Animated Object (Medium)" abbrev="Animated Object (Medium)"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="CustomCost" tag="2"/>
    <bootstrap thing="raSwallow">
      <assignval field="livename" value="Swallow Whole (1d6 fire"/>
      </bootstrap>
    </thing>
  <thing id="rcuAOGrab" name="Grab" description="Gains grab special attack." compset="RaceCustom" uniqueness="useronce">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="AllowRCust" tag="rAnimObjec" name="Animated Object (Medium)" abbrev="Animated Object (Medium)"/>
    <tag group="CustomCost" tag="1" name="1" abbrev="1"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="fShowWhat" tag="WeaponsNat"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="raGrab"></bootstrap>
    <eval phase="PreLevel" priority="10000"><![CDATA[doneif (field[usrChosen1].ischosen = 0)

var chsn as string
chsn = field[usrChosen1].chosen.idstring
chsn = "Target." & chsn

perform hero.child[raGrab].assignstr[chsn]]]></eval>
    </thing>
  <thing id="rauIcewalk" name="Icewalking" description="This ability works like the {i}spider climb{/i} spell, but the surfaces the creature climbs must be icy. The creature can move across icy surfaces without penalty and does not need to attempt Acrobatics checks to run or charge on ice." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="raxBlooDra" name="Blood Drain" description="The creature drains blood at the end of its turn if it grapples a foe, inflicting Constitution damage." compset="RaceSpec" summary="Drain blood to inflict Con dam to foe grappled at end of your turn.">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreLevel" priority="10000">~ we store damage as abValue d abValue2 Con
~ set default as 1d2

if (field[abValue].value = 0) then
  field[abValue].value = 1
endif
if (field[abValue2].value = 0) then
  field[abValue2].value = 2
endif</eval>
    <eval phase="Final" priority="10000" index="2"><![CDATA[
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)
 
      ~if we have a selected weapon, then add " plus blood drain" to the selected weapon
      call fTargetFoc
      if (state.isfocus <> 0) then
        #extradamage[focus," plus blood drain",field[name].text]
        endif]]></eval>
    <eval phase="First" priority="10000" index="3"><![CDATA[      ~if we're an ability on a custom monster, we'll need to allow the user to
      ~select the particular attack we're tied to
      if (hero.tagis[RaceType.CustomMon] <> 0) then
        perform assign[fShowWhat.WeaponsNat]
        endif]]></eval>
    <eval phase="Final" index="4"><![CDATA[~if we have a selected weapon, then set our livename
      call fTargetFoc
      if (state.isfocus <> 0) then
        field[livename].text = "Blood Drain: " & focus.field[livename].text & " (" & field[abValue].value & "d" & field[abValue2].value & " Con)"
      else
        field[livename].text = "Blood Drain" & " (" & field[abValue].value & "d" & field[abValue2].value & " Con)"
        endif]]></eval>
    </thing>
  <thing id="xCBBldDra" name="Blood Drain" description="The creature drains blood at the end of its turn if it grapples a foe, inflicting Constitution damage." compset="RaceSpec" summary="Drain blood to inflict Con dam to foe grappled at end of your turn.">
    <fieldval field="shortname" value="blood drain"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <eval phase="First" priority="10000" index="3"><![CDATA[      ~if we're an ability on a custom monster, we'll need to allow the user to
      ~select the particular attack we're tied to
      if (hero.tagis[RaceType.CustomMon] <> 0) then
        perform assign[fShowWhat.WeaponsNat]
        endif]]></eval>
    <eval phase="Render" priority="90000" index="4"><![CDATA[~set our livename & shortname
var dam as string
 
if (field[abValue].value = 0) then
  dam = field[abValue2].value & " Con"
else
  dam = field[abValue].value & "d" & field[abValue2].value & " Con"
endif

if (field[abText].isempty = 0) then
  dam &= " " & field[abText].text
endif

field[livename].text = "Blood Drain" & " (" & dam & ")"

field[shortname].text = "blood drain" & " (" & dam & " )"

if (tagis[AbilType.Extra] <> 0) then
  field[livename].text &= " (Ex)"
elseif (tagis[AbilType.Super] <> 0) then
  field[livename].text &= " (Su)"
elseif (tagis[AbilType.SpellLike] <> 0) then
  field[livename].text &= " (Sp)"
elseif (tagis[AbilType.PsiLike] <> 0) then
  field[livename].text &= " (Ps)"
endif]]></eval>
    <eval phase="Final" priority="10000" index="2"><![CDATA[
~If we're disabled, do nothing
doneif (tagis[Helper.SpcDisable] <> 0)
 
~if we have a selected weapon, then add " plus blood drain" to the selected weapon

call multTarget]]></eval>
    </thing>
  <thing id="xCBBreathW" name="Breath Weapon" description="Some creatures can exhale a cone, line, or cloud of energy or other magical effects. A breath weapon attack usually deals damage and is often based on some type of energy. Breath weapons allow a Reflex save for half damage (DC 10 + 1/2 breathing creature&apos;s racial HD + breathing creature&apos;s Con modifier; the exact DC is given in the creature&apos;s descriptive text). A creature is immune to its own breath weapon unless otherwise noted. Some breath weapons allow a Fortitude save or a Will save instead of a Reflex save. Each breath weapon also includes notes on how often it can be used, even if this number is limited in times per day." compset="RaceSpec" uniqueness="useronce">
    <comment>Set the tag BloodEner.? for the appropiate energy type
field[abValue] is the # of dice
field[abValue2] is the type of dice
field[abRange] is the range

we use the tags BreathShp.Line or BreathShp.Cone for breath shape

BreathSve.Fortitude, Will, or Reflex for save type

SaveEff.Half or Negates for save effect</comment>
    <fieldval field="trkMax" value="1"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="Custom" tag="BreathWep" name="Breath Weapon"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <eval phase="Render" priority="90000"><![CDATA[~ Generate our livename. 

field[livename].text = "Breath Weapon (" & field[abSumm].text & ")"

call abilLabel]]></eval>
    <eval phase="Final" priority="15000" index="2"><![CDATA[~ generate breath weapon 
~ we store this in abSumm to begin with
~ we write to livenamte at render 90000

~ field[abValue] is the # of dice
~ field[abValue2] is the type of dice
~ field[abRange] is the range
~ we use the tags BreathShp.Line or BreathShp.Cone for breath shape
~ BreathSve.Fortitude, Will, or Reflex for save type
~ SaveEff.Half or Negates for save effect

~ set damage
~ if we have override tag damage is given by livename
var damType as string

if (tagis[UnivAbil.Override] = 0) then
 if (field[abValue2].value > 0) then
   damType = field[abValue].value & "d" & field[abValue2].value & " " 
 else
   damType = field[abValue].value & " "
 endif
   
~ set damage type + any extras
  if (tagis[BloodEner.?] <> 0) then
     damType &= lowercase(tagnames[BloodEner.?]) & field[abText].text
  else
     damType &= field[abText].text
  endif
else
  damType = field[livename].text

endif

~ put things together
~ shape and range
field[abSumm].text = field[abRange].value & "-ft. " & lowercase(tagnames[BreathShp.?]) & ", " 
~ damage
field[abSumm].text &= damType & ", " 
~ save
field[abSumm].text &= tagnames[BreathSve.?] & " DC " & field[abDC].value & " " & lowercase(tagnames[SaveEff.?]) 
~ rate
field[abSumm].text &= ", " & field[trkMax].value & tagnames[Usage.?]

field[sbName].text = "breath weapon (" & field[abSumm].text & ")"]]></eval>
    </thing>
  <thing id="xCBBurn" name="Burn" description="A creature with the burn special attack deals fire damage in addition to damage dealt on a successful hit in melee. Those affected by the burn ability must also succeed on a Reflex save or catch fire, taking the listed damage for an additional 1d4 rounds at the start of its turn (DC 10 + 1/2 burning creature&apos;s racial HD + burning creature&apos;s Con modifier). A burning creature can attempt a new save as a full-round action. Dropping and rolling on the ground grants a +4 bonus on this save. Creatures that hit a burning creature with natural weapons or unarmed attacks take fire damage as though hit by the burning creature and must make a Reflex save to avoid catching on fire (see Pathfinder RPG Core Rulebook, page 444)." compset="RaceSpec" summary="If you hit an opponent or they touch you, you inflict fire damage.">
    <comment>damage is abValue d abvalue2</comment>
    <fieldval field="shortname" value="burn"/>
    <fieldval field="abText" value="and"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="multTarg" tag="IncDam"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <bootstrap thing="aaBurn"></bootstrap>
    <eval phase="Final" priority="1000" index="2"><![CDATA[
      ~ add "plus burn" to targeted attacks
      var v_damage as string
      v_damage = field[abValue].value & "d" & field[abValue2].value & " fire"

      call multTarget]]></eval>
    <eval phase="Render" priority="90000"><![CDATA[
      doneif (field[abValue].value = 0)
      var dam as string
      dam = field[abValue].value & "d" & field[abValue2].value & " fire"

      field[livename].text = "Burn (" & dam & ", DC " & field[abDC].value & ")"

      field[sbName].text = "burn (" & dam & ", DC " & field[abDC].value & ")"

      call abilLabel]]></eval>
    </thing>
  <thing id="xCBAirMast" name="Air Mastery" compset="RaceSpec">
    <comment>Use Value tag to assign penalty.

Summary and description set at Final/30000</comment>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Defense" name="Defense" abbrev="Defense"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="30000"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

call CalcValue

field[abSumm].text = "Airborne creatures take a -" & field[abValue].value & " penalty on attack and damage rolls against you."

perform state.thing[xCBAirMast].amendthing[description,field[abSumm].text]]]></eval>
    </thing>
  <thing id="xCBErthMas" name="Earth Mastery" compset="RaceSpec">
    <comment>Use Value tag to assign bonus.

abValue2 assigned penalty. Default -4</comment>
    <fieldval field="abValue2" value="-4"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <eval phase="Final" priority="10000"><![CDATA[
var situTxt as string
situTxt = signed(field[abValue].value) & " while both self and foe touch ground, " & signed(field[abValue2].value) & " if foe is airborne/waterborne"


#situational[hero.childfound[Attack],situTxt,field[thingname].text]
#situational[hero.childfound[Damage],situTxt,field[thingname].text]
#situational[hero.childfound[manBullRus],situTxt,field[thingname].text]
#situational[hero.childfound[manOverrun],situTxt,field[thingname].text]]]></eval>
    <eval phase="Final" priority="9000" index="2"><![CDATA[var summTxt as string
var descTxt as string

call CalcValue

summTxt = signed(field[abValue].value) & " to hit, dam, bull rush, and overrun if both self and foe are on ground, " & signed(field[abValue2].value) & " otherwise."

descTxt = "Creature gains a " & signed(field[abValue].value) & " bonus on attack and damage rolls if both it and its foe are touching the ground. If an opponent is airborne or waterborne, the elemental takes a " & signed(field[abValue2].value) & " penalty on attack and damage rolls. These modifiers apply to bull rush and overrun maneuvers, whether the elemental is initiating or resisting these kinds of attacks."

field[abSumm].text = summTxt

perform state.thing[xCBErthMas].amendthing[description,descTxt]]]></eval>
    </thing>
  <thing id="xCBFieryAu" name="Fiery Aura" compset="RaceSpec">
    <comment>Value tag is aura radius (abValue)
abValue2 d abValue3 is damage</comment>
    <tag group="SpecType" tag="Aura"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="StandardDC" tag="aCON"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="First" priority="1000">~ get aura radius

call CalcValue</eval>
    <eval phase="Render" priority="90000" index="2"><![CDATA[
var dam as string
dam = field[abValue2].value & "d" & field[abValue3].value & " fire"

field[livename].text = "Fiery Aura (" & field[abValue].value & "-ft., DC " & field[abDC].value & ", " & dam & ")"


call abilLabel]]></eval>
    <eval phase="Render" priority="90010" index="3"><![CDATA[
var summTxt as string
var descTxt as string

summTxt = "Anyone within " & field[abValue].value & "-ft. takes " & field[abValue2].value & "d" & field[abValue3].value & " fire damage"


descTxt = "Anyone within " & field[abValue].value & "-ft. must succeed on a DC " & field[abDC].value & " Fortitude save or take " & field[abValue2].value & "d" & field[abValue3].value & " fire damage each round."

field[abSumm].text = summTxt
perform state.thing[xCBFieryAu].amendthing[description,descTxt]]]></eval>
    </thing>
  <thing id="xCBWatMast" name="Water Mastery" compset="RaceSpec">
    <comment>Use Value tag to assign bonus.

abValue2 assigned penalty. Default -4</comment>
    <fieldval field="abValue2" value="-4"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <eval phase="Final" priority="10000"><![CDATA[
var situTxt as string
situTxt = signed(field[abValue].value) & " while both self and foe touch water, " & signed(field[abValue2].value) & " if either is on ground"


#situational[hero.childfound[Attack],situTxt,field[thingname].text]
#situational[hero.childfound[Damage],situTxt,field[thingname].text]
#situational[hero.childfound[manBullRus],situTxt,field[thingname].text]
#situational[hero.childfound[manOverrun],situTxt,field[thingname].text]]]></eval>
    <eval phase="Final" priority="9000" index="2"><![CDATA[var summTxt as string
var descTxt as string

call CalcValue

summTxt = signed(field[abValue].value) & " to hit, dam, bull rush, and overrun if both self and foe are in water, " & signed(field[abValue2].value) & " otherwise."

descTxt = "Creature gains a " & signed(field[abValue].value) & " bonus on attack and damage rolls if both it and its opponent are touching water. If the opponent or the elemental is touching the ground, the elemental takes a " & signed(field[abValue2].value) & " penalty on attack and damage rolls. These modifiers apply to bull rush and overrun maneuvers, whether the elemental is initiating or resisting these kinds of attacks."

field[abSumm].text = summTxt

perform state.thing[xCBWatMast].amendthing[description,descTxt]]]></eval>
    </thing>
  <thing id="xCBDrench" name="Drench" description="Creature&apos;s touch puts out nonmagical flames of Large size or smaller. The creature can dispel magical fire it touches as {i}dispel magic{/i} (caster level equals elemental&apos;s HD)." compset="RaceSpec" summary="Touch puts out nonmagical flames.">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpInfo" tag="spDispMag3" name="Dispel Magic" abbrev="Dispel Magic"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="xCBParalys" name="Paralysis" description="This special attack renders the victim immobile. Paralyzed creatures cannot move, speak, or take any physical actions. The creature is rooted to the spot, frozen and helpless. Paralysis works on the body, and a character can usually resist it with a Fortitude saving throw (DC 10 + 1/2 paralyzing creature&apos;s racial HD + paralyzing creature&apos;s Con modifier; the DC is given in the creature&apos;s description). Unlike hold person and similar effects, a paralysis effect does not allow a new save each round. A winged creature flying in the air at the time that it is paralyzed cannot flap its wings and falls. A swimmer can&apos;t swim and may drown. The duration of the paralysis varies and is included in the creature&apos;s description." compset="RaceSpec" summary="Attack renders victim immoble">
    <comment>duration is abValue d abValue2 (abText) +/- abValue3 [usage tag]

use Usage tag for type of durations (rounds, etc.)</comment>
    <fieldval field="shortname" value="paralysis"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="Usage" tag="Rounds" name=" rounds"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <bootstrap thing="aaParalyze"></bootstrap>
    <eval phase="Final" priority="11000" index="2"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

call multTarget]]></eval>
    <eval phase="Render" priority="90000"><![CDATA[
var dam as string
dam = field[abValue].value & "d" & field[abValue2].value 

if (field[abValue3].value <> 0) then
  dam &= signed(field[abValue3].value)
endif

dam &= field[abText].text & this.tagnames[Usage.?,""]


field[livename].text = "Paralysis (" & dam & ", DC " & field[abDC].value & ")"

field[shortname].text = "paralysis (" & dam & ", DC " & field[abDC].value & ")"

if (tagis[AbilType.Extra] <> 0) then
  field[livename].text &= " (Ex)"
elseif (tagis[AbilType.Super] <> 0) then
  field[livename].text &= " (Su)"
elseif (tagis[AbilType.SpellLike] <> 0) then
  field[livename].text &= " (Sp)"
elseif (tagis[AbilType.PsiLike] <> 0) then
  field[livename].text &= " (Ps)"
endif]]></eval>
    </thing>
  <thing id="xCBEnrgDr" name="Energy Drain" description="This attack saps a living opponent&apos;s vital energy and happens automatically when a melee or ranged attack hits. Each successful energy drain bestows one or more negative levels (the creature&apos;s description specifies how many). If an attack that includes an energy drain scores a critical hit, it bestows twice the listed number of negative levels. Unless otherwise specified in the creature&apos;s description, a draining creature gains 5 temporary hit points for each negative level it bestows on an opponent. These temporary hit points last for a maximum of 1 hour. Negative levels remain until 24 hours have passed or until they are removed with a spell, such as {i}restoration{/i}. If a negative level is not removed before 24 hours have passed, the affected creature must attempt a Fortitude save (DC 10 + 1/2 draining creature&apos;s racial HD + draining creature&apos;s Cha modifier; the exact DC is given in the creature&apos;s descriptive text). On a success, the negative level goes away with no harm to the creature. On a failure, the negative level becomes permanent. A separate saving throw is required for each negative level." compset="RaceSpec" summary="Foes hit by the listed attack take neg levels, gain 5 temp hp for each drained.">
    <fieldval field="shortname" value="energy drain"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aCHA" name="Charisma" abbrev="Charisma"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Super"/>
    <bootstrap thing="aaEnergyDr"></bootstrap>
    <eval phase="Final" priority="1000" index="2"><![CDATA[
doneif (tagis[Helper.SpcDisable] <> 0)

~ add "plus energy drain" to targets
call multTarget]]></eval>
    <eval phase="Render" priority="90000"><![CDATA[
if (field[abValue].value = 1) then
  if (field[abValue2].value > 0) then
     field[livename].text = "Energy Drain (1d" & field[abValue2].value & " levels, DC " & field[abDC].value & ")"
  else
     field[livename].text = "Energy Drain (" & field[abValue].value & " level, DC " & field[abDC].value & ")"
   endif
elseif (field[abValue].value > 1) then
     field[livename].text = "Energy Drain (" & field[abValue].value & " levels, DC " & field[abDC].value & ")"
endif

call abilLabel

if (field[abValue].value = 1) then
  if (field[abValue2].value > 0) then
     field[sbName].text = "energy drain (1d" & field[abValue2].value & " levels, DC " & field[abDC].value & ")"
  else
     field[sbName].text = "energy drain (" & field[abValue].value & " level, DC " & field[abDC].value & ")"
   endif
elseif (field[abValue].value > 1) then
     field[sbName].text = "energy drain (" & field[abValue].value & " levels, DC " & field[abDC].value & ")"
endif]]></eval>
    </thing>
  <thing id="xCBPound" name="Pound" description="When successfully grabbing a foe two or more sizes smaller than itself the creature can smash the opponent into the ground, walls, nearby trees, or other solid objects as a standard action. This deals the creature&apos;s trample damage to the victim. If the creature doesn&apos;t have a trample attack, the damage dealt is the creature&apos;s slam damage plus 1-1/2 Str modifer. Additionally, the opponent must make a successful Fortitude same or be stunned for one round. The creature can perform this action once per round as long as the grapple is maintained. The save DC is Strength-based." compset="RaceSpec" summary="When grappling a foe do stunning damage each round.">
    <comment>The abValue field stores the size of creatures that can be grabbed. For each size category larger or smaller than normal, add or subtract 1 from abValue when bootstrapping this ability. If the creature can grab any target, assign a large value like 10.</comment>
    <fieldval field="abValue" value="-2"/>
    <tag group="StandardDC" tag="aSTR"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <eval phase="Render" priority="90000" index="2"><![CDATA[field[livename].text = "Pound"

~turn the size value into the size text
      if (field[abValue].value <= -4) then
        field[livename].text &= " (Fine,"
      elseif (field[abValue].value = -3) then
        field[livename].text &= " (Diminutive,"
      elseif (field[abValue].value = -2) then
        field[livename].text &= " (Tiny,"
      elseif (field[abValue].value = -1) then
        field[livename].text &= " (Small, "
      elseif (field[abValue].value = 0) then
        field[livename].text &= " (Medium, "
      elseif (field[abValue].value = 1) then
        field[livename].text &= " (Large, "
      elseif (field[abValue].value = 2) then
        field[livename].text &= " (Huge, "
      elseif (field[abValue].value = 3) then
        field[livename].text &= " (Gargantuan, "
      elseif (field[abValue].value = 4) then
        field[livename].text &= " (Colossal, "
      else
        field[livename].text &= " (Any, "
        endif

~ set damage. Check trample first, then slam, then assign manually
var dam as string
if (hero.childlives[wTrample] <> 0) then
  dam = hero.child[wTrample].field[wDamNoATbl].arraytext[0]
  dam = replace(dam,hero.child[wTrample].field[wDamExtra].text,"",0)
elseif (hero.childlives[wSlam] <> 0) then
  dam = hero.child[wSlam].field[wDamNoATbl].arraytext[0]
  dam = replace(dam,hero.child[wSlam].field[wDamExtra].text,"",0)
else
~ no slam or trample assign damage manually
 if (field[abValue].value <= -4) then
   dam = "-"
 elseif (field[abValue].value = -3) then
   dam = "1"
 elseif (field[abValue].value = -2) then
   dam = "1d2"
 elseif (field[abValue].value = -1) then
   dam = "1d3"
 elseif (field[abValue].value = 0) then
   dam = "1d4"
 elseif (field[abValue].value = 1) then
   dam = "1d6"
 elseif (field[abValue].value = 2) then
   dam = "1d8"
 elseif (field[abValue].value = 3) then
   dam = "2d6"
 elseif (field[abValue].value >= 4) then
   dam = "2d8"
endif
endif

~ now add 1.5 * str bonus, but only if we are not fine
if (field[abValue].value > -4) then

  dam &= "+" & round(#attrmod[aSTR] * 1.5,0,-1)

endif

field[livename].text &= dam & " and stun, DC " & field[abDC].value & ")"

call abilLabel]]></eval>
    <eval phase="Final" priority="20000">~we use our value field to store the size category of creatures
      ~we can grab

      ~the default is our own size
      field[abValue].value += herofield[tSize].value</eval>
    </thing>
  <thing id="xCBAcidDm" name="Acid Damage" description="Specified natural attacks do additional acid damage." compset="RaceSpec" summary="Natural attacks do additional acid damage.">
    <fieldval field="shortname" value="acid"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="multTarg" tag="IncDam"/>
    <eval phase="Final" priority="10000"><![CDATA[var noDice as number
var typDice as number
var dam as string

noDice = field[abValue].value
typDice = field[abValue2].value

~ defaults to 1d6
if (noDice = 0) then 
   noDice = 1
endif
if (typDice = 0) then
   typDice = 6
endif

if (typDice = 1) then
  dam = typDice
else
 dam = noDice &"d"& typDice
endif

field[livename].text &= " (" & dam & ")"

var v_damage as string
v_damage = dam

call multTarget

field[shortname].text = lowercase(field[livename].text) & " (" & dam & ")"]]></eval>
    </thing>
  <thing id="xCBLifeSen" name="Lifesense" description="The creature notices and locates living creatures within 60 feet, just as if it possessed the blindsight ability.{br}{br}Some creatures have blindsight, the extraordinary ability to use a nonvisual sense (or a combination of such senses) to operate effectively without vision. Such sense may include sensitivity to vibrations, acute scent, keen hearing, or echolocation. This ability makes invisibility and concealment (even magical darkness) irrelevant to the creature (though it still can&apos;t see ethereal creatures and must have line of effect to a creature or object to discern that creature or object)." compset="RaceSpec" summary="Sense things and creatures without seeing them." uniqueness="unique">
    <fieldval field="abText" value="ft."/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Sense" name="Sense" abbrev="Sense"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~if there's no other value specified, presume we have a 60' range
      if (field[abValue].value + tagmax[Value.?] = 0) then
        field[abValue].value = 60
        endif

      call CalcValue]]></eval>
    <eval phase="Render" priority="10000" index="2"><![CDATA[
      ~ Use our value field as sense distance
      field[livename].text = field[name].text & " (" & field[abValue].value & " " & field[abText].text & ")"
      field[shortname].text = field[thingname].text & " " & field[abValue].value & " " & field[abText].text]]></eval>
    </thing>
  <thing id="xCBOgreBl" name="Ogre Blood" description="For all special abilities and effects, creature is considered an ogre." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="200"><![CDATA[
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ Changed to soft-coded string so we can work in the player Pack
      ~ Tim Shadow 5/23/14
      perform hero.assignstr["Race.rOgre"]]]></eval>
    </thing>
  <thing id="xCBEngulf" name="Engulf" description="The creature can engulf creatures in its path as part of a standard action. It cannot make other attacks during a round in which it engulfs. The creature merely has to move over its opponents, affecting as many as it can cover. Targeted creatures can make attacks of opportunity against the creature, but if they do so, they are not entitled to a saving throw against the engulf attack. Those who do not attempt attacks of opportunity can attempt a Reflex save to avoid being engulfed - on a success, they are pushed back or aside (target&apos;s choice) as the creature moves forward. Engulfed opponents gain the pinned condition, are in danger of suffocating, are trapped within the creature&apos;s body until they are no longer pinned, and may be subject to other special attacks from the creature. The save DC is Strength-based." compset="RaceSpec" summary="Move over foes to pin inside body and suffocate. Foe gets and AoO or can move clear (Ref neg).">
    <comment>use livename for engulf damage</comment>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="StandardDC" tag="aSTR" name="Strength" abbrev="Strength"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Render" priority="90000"><![CDATA[
var dam as string
dam = field[usrArray].arraytext[1]

if (length(dam) <> 0) then
  field[livename].text = "Engulf (DC " & field[abDC].value & ", " & dam & ")"
  field[shortname].text = "engulf (DC " & field[abDC].value & ", " & dam & ")"
else
  field[livename].text = "Engulf (DC " & field[abDC].value & ")"
  field[shortname].text = "engulf (DC " & field[abDC].value & ")"
endif

call abilLabel]]></eval>
    <eval phase="First" index="2">~ move livename to array
~ we can do this since this usrArray is not being used

doneif (length(field[livename].text) = 0)

field[usrArray].arraytext[1] = field[livename].text</eval>
    </thing>
  <thing id="xCBSwallow" name="Swallow Whole" description="If a creature with this special attack begins its turn with an opponent grappled in its mouth (see Grab), it can attempt a new combat maneuver check (as though attempting to pin the opponent). If it succeeds, it swallows its prey, and the opponent takes bite damage. Unless otherwise noted, the opponent can be up to one size category smaller than the swallowing creature. Being swallowed causes a creature to take damage each round. The amount and type of damage varies and is given in the creature&apos;s statistics. A swallowed creature keeps the grappled condition, while the creature that did the swallowing does not. A swallowed creature can try to cut its way free with any light slashing or piercing weapon (the amount of cutting damage required to get free is equal to 1/10 the creature&apos;s total hit points), or it can just try to escape the grapple. The Armor Class of the interior of a creature that swallows whole is normally 10 + 1/2 its natural armor bonus, with no modifiers for size or Dexterity. If a swallowed creature cuts its way out, the swallowing creature cannot use swallow whole again until the damage is healed. If the swallowed creature escapes the grapple, success puts it back in the attacker&apos;s mouth, where it may be bitten or swallowed again." compset="RaceSpec" summary="You can swallow smaller targets whole.">
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="Render" priority="90000"><![CDATA[~ determine damage to use for swallow whole
~ if we have the tag UnivAbil.Override we use the livename
~ if we use the livename it is just the damage text
~ if not we use the creature's bite damage + str bonus
~ for extra damaage/text use abText

var liveTxt as string

if (tagis[UnivAbil.Override] = 0) then
  ~ use bite damage
  var biteDam as string
  var strBon as number

  biteDam = replace(hero.child[wBite].field[wDamageTbl].arraytext[0],hero.child[wBite].field[wDamExtra].text,"",0)
  
  liveTxt = "Swallow Whole (" & biteDam

else
  liveTxt = "Swallow Whole (" & field[livename].text
endif

if (field[abText].isempty = 0) then
  liveTxt &= " " & field[abText].text
endif

field[actName].text = "Swallow Whole"

~our abValue is our AC
~default: 10 + 1/2 natural armor
field[abValue].value += 10 + round(hero.child[ArmorClass].field[tACNatural].value/2,0,-1)

~our abValue2 is our HP
~default: 1/10 our HP
field[abValue2].value += round(herofield[tHP].value/10,0,-1)

~ set livename for Swallow whole
field[livename].text = liveTxt & ", AC " & field[abValue].value & ", " & field[abValue2].value & " HP)"

 call abilLabel

~ set sbName
field[sbName].text = lowercase(liveTxt) & ", AC " & field[abValue].value & ", " & field[abValue2].value & " hp)"]]></eval>
    </thing>
  <thing id="xCBCreaSpw" name="Create Spawn" description="Slain opponent rises as a type of undead under original&apos;s control." compset="RaceSpec">
    <comment>Holder for create spawn. 
Use amendthing routine to set description.</comment>
    <tag group="AbilType" tag="Super"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    </thing>
  <thing id="xCBAbilDam" name="Ability Damage" description="Attacks do additional ability damage." compset="RaceSpec">
    <comment>Use DamAbil tag to sepecify which ability

amount of damage is 
abValue d adValue2</comment>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="multTarg" tag="IncDam"/>
    <eval phase="Final" priority="1000" index="2"><![CDATA[
var dam as string
if (field[abValue2].value = 0) then
  field[abText].text = field[abValue].value
else
  field[abText].text = field[abValue].value & "d" & field[abValue2].value
endif

~ set ability
var abilTxt as string

if (tagis[DamAbil.aSTR] <> 0) then
  abilTxt = "Strength"
elseif (tagis[DamAbil.aDEX] <> 0) then
  abilTxt = "Dexterity"
elseif (tagis[DamAbil.aCON] <> 0) then
  abilTxt = "Constitution"
elseif (tagis[DamAbil.aINT] <> 0) then
  abilTxt = "Intelligence"
elseif (tagis[DamAbil.aWIS] <> 0) then
  abilTxt = "Wisdom"
elseif (tagis[DamAbil.aCHA] <> 0) then
  abilTxt = "Charisma"
endif

~ livename
field[livename].text = abilTxt & " Damage (" & field[abText].text & ")"

doneif (tagis[Helper.SpcDisable] <> 0)

var v_damage as string
v_damage = field[abText].text 

call multTarget]]></eval>
    <eval phase="Final" index="4"><![CDATA[~ set shortname to ability name

field[shortname].text = tagnames[DamAbil.?,""]]]></eval>
    </thing>
  <thing id="xCBFireDm" name="Fire Damage" description="Specified natural attacks do additional fire damage." compset="RaceSpec" summary="Natural attacks do additional fire damage.">
    <fieldval field="shortname" value="fire"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="multTarg" tag="IncDam"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="Final" priority="9000"><![CDATA[var noDice as number
var typDice as number
var dam as string

noDice = field[abValue].value
typDice = field[abValue2].value

~ defaults to 1d6
if (noDice = 0) then 
   noDice = 1
endif
if (typDice = 0) then
   typDice = 6
endif

dam = noDice &"d"& typDice

field[livename].text &= " (" & dam & ")"

var v_damage as string
v_damage = dam

call multTarget

field[shortname].text = lowercase(field[livename].text) & " (" & dam & ")"]]></eval>
    </thing>
  <thing id="xCBElecDm" name="Electricity Damage" description="Specified natural attacks do additional electricity damage." compset="RaceSpec" summary="Natural attacks do additional cold damage.">
    <fieldval field="shortname" value="electricity"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="multTarg" tag="IncDam"/>
    <eval phase="Final" priority="10000"><![CDATA[var noDice as number
var typDice as number
var dam as string

noDice = field[abValue].value
typDice = field[abValue2].value

~ defaults to 1d6
if (noDice = 0) then 
   noDice = 1
endif
if (typDice = 0) then
   typDice = 6
endif

dam = noDice &"d"& typDice

field[livename].text &= " (" & dam & ")"

var v_damage as string
v_damage = dam

call multTarget

field[shortname].text = lowercase(field[livename].text) & " (" & dam & ")"]]></eval>
    </thing>
  <thing id="xCBColdDm" name="Cold Damage" description="Specified natural attacks do additional cold damage." compset="RaceSpec" summary="Natural attacks do additional cold damage.">
    <fieldval field="shortname" value="cold"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="multTarg" tag="IncDam"/>
    <eval phase="Final" priority="10000"><![CDATA[var noDice as number
var typDice as number
var dam as string

noDice = field[abValue].value
typDice = field[abValue2].value

~ defaults to 1d6
if (noDice = 0) then 
   noDice = 1
endif
if (typDice = 0) then
   typDice = 6
endif

dam = noDice &"d"& typDice

field[livename].text &= " (" & dam & ")"

var v_damage as string
v_damage = dam

call multTarget

field[shortname].text = lowercase(field[livename].text) & " (" & dam & ")"]]></eval>
    </thing>
  <thing id="xCBSonicDm" name="Sonic Damage" description="Specified natural attacks do additional sonic damage." compset="RaceSpec" summary="Natural attacks do additional sonic damage.">
    <fieldval field="shortname" value="sonic"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="multTarg" tag="IncDam"/>
    <eval phase="Final" priority="10000"><![CDATA[var noDice as number
var typDice as number
var dam as string

noDice = field[abValue].value
typDice = field[abValue2].value

~ defaults to 1d6
if (noDice = 0) then 
   noDice = 1
endif
if (typDice = 0) then
   typDice = 6
endif

dam = noDice &"d"& typDice

field[livename].text &= " (" & dam & ")"

var v_damage as string
v_damage = dam

call multTarget

field[shortname].text = lowercase(field[livename].text) & " (" & dam & ")"]]></eval>
    </thing>
  <thing id="xCBBleed" name="Bleed" description="A creature with this ability causes wounds that continue to bleed, inflicting additional damage each round at the start of the affected creature&apos;s turn. This bleeding can be stopped by a successful DC 15 Heal skill check or through the application of any magical healing. The amount of damage each round is determined in the creature&apos;s entry." compset="RaceSpec" summary="Attack causes additional damage at the beginning of the target&apos;s turn.">
    <fieldval field="shortname" value="bleed"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="Universal" tag="Universal"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="multTarg" tag="IncDam"/>
    <bootstrap thing="aaBleed"></bootstrap>
    <eval phase="Final" priority="1000"><![CDATA[
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      call CalcValue

      ~ set up damage and store in abText
      if (field[abValue2].value = 0) then
        field[abText].text = field[abValue].value
      else
        field[abText].text = field[abValue].value & "d" & field[abValue2].value
      endif

      ~ set targets if we are not disabled
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Applly the affect to multipile Target.? picks
      call multTarget
      ]]></eval>
    <eval phase="Final" priority="1000" index="2"><![CDATA[
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)
    
      field[livename].text = "Bleed (" & field[abText].text & ")"
      field[sbName].text = "bleed (" & field[abText].text & ")"
      ]]></eval>
    </thing>
  <thing id="xCBHeat" name="Heat" description="The creature generates intense heat that its mere touch deals additional fire damage. The creature&apos;s metallic melee weapons also conduct this heat. Those attacking creature unarmed or with natural weapon takes this fire damage each time one of their attacks hit." compset="RaceSpec" summary="Do extra fire damage on attacks and to those striking you with natural attacks.">
    <comment>This version of heat allows user to select the amount of fire damage.  

Type number of dice damage in the abValue field
Type type of dice in the abValue2 field</comment>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="1000"><![CDATA[
if (field[abValue2].value <> 0) then
  field[abText].text = field[abValue].value & "d" & field[abValue2].value
else
  field[abText].text = field[abValue].value
endif

doneif (tagis[Helper.SpcDisable] <> 0)

~find all our melee weapons that are unarmed attacks, natural attacks, or
~metal weapons - each gets heat damage

foreach pick in hero from BaseWep where "wCategory.Melee & (wCategory.Unarmed | component.BaseNatWep | EquipType.Metal)"
     #extradamage[eachpick,"+" & field[abText].text & " fire",field[name].text]
nexteach]]></eval>
    <eval phase="Render" priority="90000" index="2"><![CDATA[~ live and short names

field[livename].text = "Heat (" & field[abText].text & ")"

call abilLabel

field[shortname].text = "heat (" & field[abText].text & ")"]]></eval>
    </thing>
  <thing id="xCBCold" name="Cold" description="The creature generates intense cold that its mere touch deals additional cold damage. The creature&apos;s metallic melee weapons also conduct this cold. Those attacking creature unarmed or with natural weapon takes this cold damage each time one of their attacks hit." compset="RaceSpec" summary="Do extra cold damage on attacks and to those striking you with natural attacks.">
    <comment>This version of cold allows user to select the amount of cold damage.  Defualts to 1d6.

Type number of dice damage in the abValue field
Type type of dice in the abValue2 field</comment>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="Render" priority="90000"><![CDATA[~ live and short names

field[livename].text = "Cold (" & field[abText].text & ")"

call abilLabel

field[shortname].text = "cold (" & field[abText].text & ")"]]></eval>
    <eval phase="Final" priority="1000" index="2"><![CDATA[var damStr as string

if (field[abValue2].value <> 0) then
  field[abText].text = field[abValue].value & "d" & field[abValue2].value
else
  field[abText].text = field[abValue].value
endif

doneif (tagis[Helper.SpcDisable] <> 0)

~find all our melee weapons that are unarmed attacks, natural attacks, or
~metal weapons - each gets cold damage

foreach pick in hero from BaseWep where "wCategory.Melee & (wCategory.Unarmed | component.BaseNatWep | EquipType.Metal)"
     #extradamage[eachpick,"+" & field[abText].text & " cold",field[name].text]
nexteach]]></eval>
    </thing>
  <thing id="xCBOrcBl" name="Orc Blood" description="For all special abilities and effects, creature is considered an orc." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" priority="200"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

perform hero.assign[Race.rOrc]]]></eval>
    </thing>
  <thing id="xCBSplit" name="Split" description="The creature splits into two identical copies of itself if subject to certain attacks or effects. Each copy has half the original&apos;s current hit points (rounded down).{br}{br}A creature reduced below the listed hit points cannot be further split and can be killed normally." compset="RaceSpec" summary="Certain attacks split you into two identical copies." uniqueness="unique">
    <comment>use abValue for hp limit
use livename for damage type</comment>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="Defense" name="Defense" abbrev="Defense"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <eval phase="First">doneif (length(field[livename].text) = 0)

field[usrArray].arraytext[1] = field[livename].text</eval>
    <eval phase="Render" priority="90000" index="2"><![CDATA[
var dam as string
dam = field[usrArray].arraytext[1]

var damStr as string

if (field[abValue].value <> 0) then
  damStr = dam & ", " & field[abValue].value & " hp"
else
  damStr = dam
endif

field[livename].text = "Split (" & damStr & ")"
field[shortname].text = "split (" & damStr & ")"

call abilLabel]]></eval>
    </thing>
  <thing id="xCBAbilDra" name="Ability Drain" description="Attacks do additional ability drain." compset="RaceSpec">
    <comment>Use DamAbil tag to sepecify which ability

amount of damage is 
abValue d adValue2</comment>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="multTarg" tag="IncDam"/>
    <eval phase="Final" priority="1000" index="2"><![CDATA[
var dam as string
if (field[abValue2].value = 0) then
  field[abText].text = field[abValue].value
else
  field[abText].text = field[abValue].value & "d" & field[abValue2].value
endif

~ set ability
var abilTxt as string

if (tagis[DamAbil.aSTR] <> 0) then
  abilTxt = "Strength"
elseif (tagis[DamAbil.aDEX] <> 0) then
  abilTxt = "Dexterity"
elseif (tagis[DamAbil.aCON] <> 0) then
  abilTxt = "Constitution"
elseif (tagis[DamAbil.aINT] <> 0) then
  abilTxt = "Intelligence"
elseif (tagis[DamAbil.aWIS] <> 0) then
  abilTxt = "Wisdom"
elseif (tagis[DamAbil.aCHA] <> 0) then
  abilTxt = "Charisma"
endif

~ livename
field[livename].text = abilTxt & " Drain (" & field[abText].text & ")"

doneif (tagis[Helper.SpcDisable] <> 0)


var v_damage as string
v_damage = field[abText].text 

call multTarget]]></eval>
    <eval phase="Final" index="4"><![CDATA[~ set shortname to ability name

field[shortname].text = tagnames[DamAbil.?,""] & " drain"]]></eval>
    </thing>
  <thing id="xCBStench" name="Stench" description="A creature with the stench special ability secretes an oily chemical that nearly every other creature finds offensive. All living creatures (except those with the stench special ability) within 30 feet must succeed on a Fortitude save (DC 10 + 1/2 stench creature&apos;s racial HD + stench creature&apos;s Con modifier; the exact DC is given in the creature&apos;s descriptive text) or be sickened. The duration of the sickened condition is given in the creature&apos;s descriptive text. Creatures that successfully save cannot be affected by the same creature&apos;s stench for 24 hours. A {i}delay poison{/i} or {i}neutralize poison{/i} spell removes the effect from the sickened creature. Creatures with immunity to poison are unaffected, and creatures resistant to poison receive their normal bonus on their saving throws." compset="RaceSpec" summary="Living creatures in aura&apos;s range are sickened for listed duration (Fort neg).">
    <fieldval field="abValue2" value="30"/>
    <tag group="SpecType" tag="Aura" name="Aura" abbrev="Aura"/>
    <tag group="StandardDC" tag="aCON" name="Constitution" abbrev="Constitution"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Render" priority="900000" index="2"><![CDATA[
      ~ Use our value2 field as the range of our aura, the value field as
      ~ number of rounds (or dice), and value3 as the die size (if any).
      if (field[abValue3].value <> 0) then
        field[livename].text = "Stench (" & field[abValue2].value & "-ft, DC " & field[abDC].value & ", " & field[abValue].value & "d" & field[abValue3].value & " " & field[abText].text & ")"
      else
        field[livename].text = "Stench (" & field[abValue2].value & "-ft, DC " & field[abDC].value & ", " & field[abValue].value & " " & field[abText].text & ")"
        endif

call abilLabel]]></eval>
    <eval phase="Final" priority="10000"><![CDATA[
      call CalcValue

      ~ To add a duration that is not rds, specify it in the abText field
      ~ Otherwise, if that is empty, fill it now.
      if (field[abText].isempty <> 0) then
        field[abText].text = "rds"
        endif]]></eval>
    </thing>
  <thing id="xCBFearAur" name="Fear Aura" description="The use of this ability is a free action. The aura can freeze an opponent (as in the case of a mummy&apos;s despair) or function like the {i}fear{/i} spell. Other effects are possible. A fear aura is an area effect. The descriptive text gives the size and kind of the area." compset="RaceSpec" summary="Foes within radius are affected by the {i}fear{/i} spell.">
    <comment><![CDATA[Community version allows users to specify duration of fear effect in rounds. (abValue2 d abValue3)

If abValue3 is zero we don't diplace duration.]]></comment>
    <fieldval field="shortname" value="fear"/>
    <tag group="StandardDC" tag="aCHA" name="Charisma" abbrev="Charisma"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="SpecType" tag="Aura" name="Aura" abbrev="Aura"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~if nothing else has set the area, assume 30'
      if (field[abValue].value + tagmax[Value.?] = 0) then
        field[abValue].value = 30
        field[abRange].value = 30
        endif

      call CalcRange]]></eval>
    <eval phase="Render" priority="90000" index="2"><![CDATA[
      ~ Use our value field as the range of our aura

if (field[abValue3].value = 0) then

      field[livename].text = "Fear Aura (" & field[abRange].value & " ft., DC " & field[abDC].value & ")"
      field[sbName].text = "fear (" & field[abRange].value & " ft., DC " & field[abDC].value & ")"

else
      field[livename].text = "Fear Aura (" & field[abRange].value & " ft., DC " & field[abDC].value & ", " & field[abValue2].value & "d" & field[abValue3].value & " rounds)"
      field[sbName].text = "fear (" & field[abRange].value & " ft., DC " & field[abDC].value & ", " & field[abValue2].value & "d" & field[abValue3].value & " rounds)"


endif]]></eval>
    </thing>
  <thing id="xCBSummon" name="Summon" description="A creature with the summon ability can summon other specific creatures of its kind much as though casting a summon monster spell, but it usually has only a limited chance of success (as specified in the creature&apos;s entry). Roll d%: On a failure, no creature answers the summons. Summoned creatures automatically return whence they came after 1 hour. A creature summoned in this way cannot use any spells or spell-like abilities that require material components costing more than 1 gp unless those components are supplied, nor can it use its own summon ability for 1 hour. An appropriate spell level is given for each summoning ability for purposes of Will saves, caster level checks, and concentration checks. No experience points are awarded for defeating summoned monsters." compset="RaceSpec">
    <comment>field abValue is level
field abText is what is summoned</comment>
    <fieldval field="abText" value="monsters summoned"/>
    <fieldval field="abValue" value="1"/>
    <tag group="Universal" tag="Universal" name="Universal Monster Ability or Core Rulebook ability" abbrev="Universal Monster Ability or Core Rulebook ability"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="SpellLike" name="Spell-Like Ability" abbrev=" (Sp)"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="SpecType" tag="SpellLike" name="Spell-Like Ability" abbrev="Spell-Like Ability"/>
    <eval phase="First" priority="4000"><![CDATA[
~ set destription as summary

var summ as string
summ = "level " & field[abValue].value & ", " & field[abText].text

field[abSumm].text &= summ


~ prepend description

perform state.thing[xCBSummon].amendthing[description, "{align center}{b}" & summ & "{/b}{br}{br}{align left}" & state.thing[xCBSummon].field[descript].text]]]></eval>
    <eval phase="Render" priority="110000" index="2"><![CDATA[

~ set spellblock name
field[sbName].text = "summon {b}(" & field[abSumm].text & "){/b}"]]></eval>
    </thing>
  <thing id="xCBMyIncSw" name="Increased Swarm Damage" description="Swarm damage is increased by +1d6. \n\nThis ability can be taken multiple times." compset="RaceSpec">
    <tag group="Helper" tag="Mythic"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="5005"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

hero.child[raSwarmAtk].field[abValue].value += 1

var curDam as string
var newDam as string
curDam = hero.child[raSwarmAtk].tagnames[wMain.?,""]
if (compare(curDam,"10d6") = 0) then
~ we do not have the ability to increase above 10d6
  newDam = curDam
elseif (compare(curDam,"9d6") = 0) then
  newDam = "10d6_11"
elseif (compare(curDam,"8d6") = 0) then
  newDam = "9d6_108"
elseif (compare(curDam,"7d6") = 0) then
  newDam = "8d6_108"
elseif (compare(curDam,"6d6") = 0) then
  newDam = "7d6_107"
elseif (compare(curDam,"5d6") = 0) then
  newDam = "6d6_107"
elseif (compare(curDam,"4d6") = 0) then
  newDam = "5d6_106"
elseif (compare(curDam,"3d6") = 0) then
  newDam = "4d6_106"
elseif (compare(curDam,"2d6") = 0) then
  newDam = "3d6_8"
elseif (compare(curDam,"1d6") = 0) then
  newDam = "2d6_104"
endif

~ now replace wMain tag
perform hero.child[raSwarmAtk].delete[wMain.?]
perform hero.child[raSwarmAtk].assignstr["wMain." & newDam]]]></eval>
    </thing>
  <thing id="rcCBBalLiD" name="Lifedrinker" description="Whenever the balor lord slays a living foe, it receives the benefits of a {i}heal{/i} spell (CL 20th). This ability can activate up to once per round." compset="RaceCustom" summary="Heal when you slay a living foe." uniqueness="useronce">
    <fieldval field="trkMax" value="1"/>
    <usesource source="Bestiary1"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AllowRCust" tag="cfgCBBalor"/>
    <tag group="User" tag="Tracker"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="Usage" tag="Round"/>
    <tag group="Helper" tag="NoPathSoc"/>
    </thing>
  <thing id="rcCBBalSuS" name="Soul Swallow" description="As a standard action, the balor lord can inhale the soul of a living creature within 30 feet. The target must make a Fortitude save (DC 10 + 1/2 balor lord&apos;s racial HD + the balor lord&apos;s Charisma modifier) or die. The body of a humanoid creature killed in this manner immediately transforms into a demon under the balor lord&apos;s command (a babau, succubus, or shadow demon, according to the balor lord&apos;s whim)." compset="RaceCustom" summary="Inhale soul of living creature and transform it into a demon." uniqueness="useronce">
    <usesource source="Bestiary1"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="StandardDC" tag="aCHA"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AllowRCust" tag="cfgCBBalor"/>
    <tag group="AbilType" tag="Super"/>
    </thing>
  <thing id="rcCBDalAng" name="Angelslayer" description="All weapon damage the balor lord inflicts, be it via natural weapons or wielded weapons, is treated as chaotic, evil, and epic for the purposes of overcoming damage reduction and halting regeneration. The balor lord automatically confirms all critical hits against angels, and gains a +4 profane bonus to its AC and on all saving throws against attacks made by angels." compset="RaceCustom" summary="Attacks considered chaotic, evil, and epic and halts regeneration." uniqueness="useronce">
    <usesource source="CSDemRevi"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AllowRCust" tag="cfgCBBalor"/>
    <tag group="AbilType" tag="Super"/>
    <eval phase="Final" priority="1000"><![CDATA[
doneif (tagis[Helper.SpcDisable] <> 0)

#situational[hero.child[ArmorClass],"+4 profane vs. angels",field[name].text]
#situational[hero.child[svAll],"+4 profane vs. angelic special attacks",field[name].text]]]></eval>
    </thing>
  <thing id="rcCBBalStm" name="Stormlord" description="The balor&apos;s spell-like abilities, death throes, and flaming body abilities can inflict electricity damage instead of fire damage, as appropriate-the balor lord can decide to adjust its fire damage in this way instantaneously. Electricity resistance is halved against this electricity damage, and electricity immunity is treated as resist electricity 20. Up to once per round when the balor lord is targeted by electricity damage, it can choose to heal damage equal to the amount of electricity damage caused rather than simply be immune to the damage." compset="RaceCustom" summary="Fire abilities can inflict electricity damage instead of fire damage." uniqueness="useronce">
    <usesource source="CSDemRevi"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="AllowRCust" tag="cfgCBBalor"/>
    </thing>
  <thing id="rcCBBalSwm" name="Swarm-Infested" description="The balor lord is immune to damage and effects caused by swarms, and can elect to exclude swarms from taking any damage from its energy-based attacks. It can direct the actions of any mindless swarm within 90 feet as a free action. Three times per day as a swift action, the balor can expel a fiendish advanced tick swarm from its body; the swarm appears in any four contiguous 10-foot squares adjacent to the balor, has a fly speed of 50 feet (perfect), and lasts until it is slain." compset="RaceCustom" summary="Immune to swarm, protect swwarms from damage, and expel swarm from body.">
    <fieldval field="trkMax" value="3"/>
    <usesource source="CSDemRevi"/>
    <tag group="User" tag="Tracker"/>
    <tag group="AllowRCust" tag="cfgCBBalor"/>
    <tag group="Usage" tag="Day"/>
    <tag group="Helper" tag="NoPathSoc"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Super"/>
    <tag group="SpecType" tag="Attack"/>
    </thing>
  <thing id="xCBAuraUnh" name="Unholy Aura" description="A malevolent darkness surrounds the subjects, protecting them from attacks, granting them resistance to spells cast by good creatures, and weakening good creatures when they strike the subjects. This abjuration has four effects:\n\nEach warded creature gains a +4 deflection bonus to AC and a +4 resistance bonus on saves. Unlike the effect of protection from good, this benefit applies against all attacks, not just against attacks by good creatures.\n\nA warded creature gains spell resistance 25 against good spells and spells cast by good creatures.\n\nThe abjuration protects the subjects from possession and mental influence, just as protection from good does.\n\nIf a good creature succeeds on a melee attack against a warded creature, the offending attacker takes 1d6 points of Strength damage (Fortitude negates)." compset="RaceSpec" uniqueness="useronce">
    <comment>Use this for creatures that have a constant unholy aura effect. It will show up in the statblock and bootstrap the spell-like ability.

field abRange is the range of the aura.
abValue is caster level</comment>
    <fieldval field="abRange" value="20"/>
    <tag group="SpecType" tag="Aura"/>
    <tag group="UseAbil" tag="Wis"/>
    <tag group="abSave" tag="FortPart"/>
    <tag group="abAction" tag="Constant"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="SpellLike"/>
    <tag group="Helper" tag="ShowStatbl"/>
    <bootstrap thing="spUnhoAur8">
      <autotag group="Helper" tag="SpellLike"/>
      <autotag group="Usage" tag="Constant"/>
      </bootstrap>
    <eval phase="Render" priority="90000" index="2"><![CDATA[~ labels

var disp as string
var sdisp as string
disp = "Unholy Aura (" 
sdisp = "{i}unholy aura{/i} ("
if (field[abRange].value <> 0) then
disp &= field[abRange].value & " ft., DC "
sdisp &= field[abRange].value & " ft., DC "
else
disp &= "DC "
sdisp &= "DC "
endif

~ recalculate DC
~ use out UseAbil tag to set what ability we use
var mod as number
if (tagis[UseAbil.Str] <> 0) then
  mod = #attrmod[aSTR]
elseif (tagis[UseAbil.Dex] <> 0) then
  mod = #attrmod[aDEX]
elseif (tagis[UseAbil.Con] <> 0) then
  mod = #attrmod[aCON]
elseif (tagis[UseAbil.Int] <> 0) then
  mod = #attrmod[aINT]
elseif (tagis[UseAbil.Wis] <> 0) then
  mod = #attrmod[aWIS]
elseif (tagis[UseAbil.Cha] <> 0) then
  mod = #attrmod[aCHA]
endif

~ abValue is our caster level
field[abDC].value += 10 + round(field[abValue].value/2,0,-1) + mod


disp &= field[abDC].value & ")"
sdisp &= field[abDC].value & ")"

~ set livename and sbName
~ since DC will become lowercase, we have to put it back uppercase
field[livename].text = disp
field[sbName].text = sdisp]]></eval>
    <eval phase="Render" priority="1000"><![CDATA[
doneif (tagis[Helper.SpcDisable] <> 0)

hero.child[ArmorClass].field[tACDeflect].value = maximum(4,hero.child[ArmorClass].field[tACDeflect].value)

hero.child[svAll].field[Bonus].value += 4

if (hero.child[xSplRs].field[abValue].value < 25) then

#situational[hero.child[xSplRs],"25 vs. good spells and effects",field[name].text]

endif]]></eval>
    </thing>
  <thing id="xCBSeeInvi" name="See Invisibility" description="You can see any objects or beings that are invisible within your range of vision, as well as any that are ethereal, as if they were normally visible. Such creatures are visible to you as translucent shapes, allowing you easily to discern the difference between visible, invisible, and ethereal creatures.\n\nThe spell does not reveal the method used to obtain invisibility. It does not reveal illusions or enable you to see through opaque objects. It does not reveal creatures who are simply hiding, concealed, or otherwise hard to see.\n\nSee invisibility can be made permanent with a {i}permanency{/i} spell." compset="RaceSpec" uniqueness="useronce">
    <comment>Use this for creatures that have a constant see invisibility effect. It will show up in the statblock and bootstrap the spell-like ability.

field abRange is the range of the aura.
abValue is caster level</comment>
    <tag group="UseAbil" tag="Wis"/>
    <tag group="abAction" tag="Constant"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="SpellLike"/>
    <tag group="Helper" tag="ShowStatbl"/>
    <tag group="SpecType" tag="Sense"/>
    <bootstrap thing="spSeeInv2">
      <autotag group="Helper" tag="SpellLike"/>
      <autotag group="Usage" tag="Constant"/>
      </bootstrap>
    </thing>
  <thing id="xCBMyBnFea" name="Bonus Feat" description="Gain a bonus feat." compset="RaceSpec">
    <usesource source="PathWraRig"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="Mythic"/>
    <eval phase="PreLevel"><![CDATA[
doneif (tagis[Helper.SpcDisable] <> 0)

~ gain feat

#resmax[resFeat] += 1]]></eval>
    </thing>
  <thing id="xxDiseasHe" name="xxDiseasHe" description="xxDiseasHe - MISSING!" compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="raCBRaveno" name="Ravenous" description="You can devour nearly anything, with the exception of adamantine. If the swarm attacks an object or structure, you ignore its hardness if it is made of any substance other than adamantine. Additionally, every round that a creature is in the same space as the swarm, you begin devouring one object on the creature. The object takes half its maximum hit points in damage and gains the broken condition. If you attack an object with the broken condition, it is destroyed. An attended or magic object can make a DC 15 Reflex save to negate this effect. The save DC is Constitution-based." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="raCBDemLTr" name="Demon Lord Traits" description="A demon lord is a powerful, unique demon that rules a layer of the Abyss. All demon lords are chaotic evil outsiders that are, at a minimum, CR 26. Demon lords have a particular suite of traits (unless otherwise noted in a creature&apos;s entry) as summarized here.\n\n • A demon lord can grant spells to its worshipers as if it were a deity. A demon lord&apos;s domains are Chaos, Evil, and two other domains relevant to its theme and interests. Like a deity, a demon lord has a favored weapon.\n • A demon lord&apos;s natural weapons, as well as any weapons it wields, are treated as chaotic, epic, and evil for the purpose of overcoming damage reduction.\n • Abyssal Resurrection (Ex) A demon lord rules an Abyssal realm, a vast world that not only serves as its home but provides it with power. If a demon lord is slain, its body rapidly melts into corruption (leaving behind any gear it held or carried), its soul returns to a hidden location within its realm, and it is immediately restored to life (as true resurrection) at that location. Once this occurs, a demon lord can&apos;t use this ability again until a full year has passed. A demon lord realizes it is vulnerable during this time and usually doesn&apos;t risk further battles for the remainder of that year, relying on the defenses of its realm and its legions of minions to protect it. A demon lord that is slain again during this year or is killed by unusual methods (such as by a true deity or an artifact created for this purpose) is slain forever-its remains appearing somewhere deep in the Abyss among other dead demon lords from the ages. A demon lord who does not control a domain does not gain this ability.\n • Frightful Presence (Su) A demon lord can activate its frightful presence as a free action as part of any attack, spell-like ability, special attack, or by speaking aloud.\n • Immunity to ability damage, ability drain, charm effects, compulsion effects, death effects, energy drain, and petrification.\n • Regeneration (Ex) Only epic and good damage, or damage from a creature of equal or greater power (such as an archdevil, deity, demon lord, or protean lord) interrupts a demon lord&apos;s regeneration.\n • Resistance to acid 30, cold 30, and fire 30.\n • Summon Demons (Sp) Three times per day as a swift action, a demon lord can summon any demon or combination of demons whose total combined CR is 20 or lower. This otherwise works like the summon universal monster rule with a 100% chance of success, and counts as a 9th-level spell effect.\n • Telepathy 300 feet." compset="RaceSpec">
    <tag group="Helper" tag="ShowStatbl"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xImmAbilDr"></bootstrap>
    <bootstrap thing="xImmCharm"></bootstrap>
    <bootstrap thing="xImmComp"></bootstrap>
    <bootstrap thing="xImmDeath"></bootstrap>
    <bootstrap thing="xImmEnerDr"></bootstrap>
    <bootstrap thing="xImmPetri"></bootstrap>
    <bootstrap thing="raCBAbyRes"></bootstrap>
    <bootstrap thing="xDamRsAcid">
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="xDamRsCold">
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="xDamRsFire">
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="xRegen">
      <assignval field="abText" value="deific or mythic"/>
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="xTelepathy">
      <assignval field="abValue" value="300"/>
      </bootstrap>
    <bootstrap thing="raSummon">
      <autotag group="Usage" tag="Day"/>
      <assignval field="trkMax" value="3"/>
      <assignval field="livename" value="Summon (swift, level 9, demons of combined CR 20 100%)"/>
      <assignval field="sbName" value="summon demons"/>
      <assignval field="DescAppend" value="Three times per day as a swift action, a demon lord can summon any demon or combination of demons whose total combined CR is 20 or lower. This otherwise works like the summon universal monster rule with a 100% chance of success, and counts as a 9th-level spell effect."/>
      </bootstrap>
    <bootstrap thing="raFrightPr">
      <assignval field="DescAppend" value="A demon lord can activate its frightful presence as a free action as part of any attack, spell-like ability, special attack, or by speaking aloud."/>
      <assignval field="abRange" value="120"/>
      </bootstrap>
    <bootstrap thing="xImmAbilDm"></bootstrap>
    </thing>
  <thing id="raCBRunes2" name="Runes" description="Whenever a rune giant is affected by a spell or spell-like ability, it can cause the runes covering its body to flash with light. All creatures within 10 feet of the giant must make a Fortitude save or be blinded for 1 round. The saving throw is Charisma-based." compset="RaceSpec" summary="When hit w/spell all within 10 ft. must save or be blinded (Fort neg).">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SpecType" tag="Attack"/>
    <tag group="StandardDC" tag="aCHA"/>
    <tag group="abSave" tag="FortNeg"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="raCBInvGCl" name="Claws" description="An inverted giant can channel arcane energy into its fists whenever it makes a successful claw attack, dealing 1d6 points of energy damage (cold, electricity, or fire, chosen when the inverted giant attacks) in addition to the damage its claws normally deal." compset="RaceSpec" summary="Add 1d6 energy damage of type you choose to claw attacks.">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SpecType" tag="Attack"/>
    </thing>
  <thing id="raCBMilita" name="Militant" description="This creature is proficient in all simple weapons, all martial weapons, and one exotic weapon of its choice." compset="RaceSpec">
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="fShowWhat" tag="WeaponsExo"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <eval phase="First" priority="1000"><![CDATA[
~ If disabled get out now!
doneif (tagis[Helper.SpcDisable] <> 0)
~ If nothing chosen get out now!
doneif (field[usrChosen1].ischosen <> 1)

perform field[usrChosen1].chosen.pulltags[WepProf.?]
perform hero.pushtags[WepProf.?]
var v_tag as string
v_tag = "Helper.ExoticProf"
call ChosenProf]]></eval>
    </thing>
  <thing id="raCBShaClo" name="Shadow Cloak" description="Because of the shadow giant&apos;s connection with the Plane of Shadow, as a move action in any illumination other than direct sunlight, a shadow giant can cloak itself in moving shadows that act as the spell {i}blur{/i} for 1d6+6 rounds. It can use this ability three times per day." compset="RaceSpec" summary="Cloak self in moving shadows that act as {i}blur{/i} for 1d6+6 rounds.">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpInfo" tag="spBlur2"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SpecType" tag="Defense"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="raCBNaDeLo" name="Nascent Demon Lord Traits" description="A nascent demon lord is a powerful demon that has not yet made the full transition from unique demon to full demon lord of an Abyssal realm. They have several traits, as summarized here.\n\n• Immunity to charm and compulsion effects, death effects, electricity, and poison.\n\n• Resistance to acid 30, cold 30, and fire 30.\n\n• {i}Summon (Sp){/i} Once per day, Nightripper can summon any demon or combination of demons whose total combined CR is 20 or lower. This ability always works, and is equivalent to a 9th-level spell.\n\n• Telepathy 300 feet.\n\n• Natural weapons, as well as any weapon he wields, are treated as chaotic, epic, and evil for the purpose of overcoming damage reduction.\n\n• Can grant spells to his worshipers." compset="RaceSpec" summary="Wielded weapons are treated as chaotic, epic, and evil. Grants spells to worshppers.">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xImmCharm"></bootstrap>
    <bootstrap thing="xImmDeath"></bootstrap>
    <bootstrap thing="xImmElec"></bootstrap>
    <bootstrap thing="xImmPois"></bootstrap>
    <bootstrap thing="xDamRsAcid">
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="xDamRsCold">
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="xDamRsFire">
      <assignval field="abValue" value="30"/>
      </bootstrap>
    <bootstrap thing="raSummon">
      <autotag group="Helper" tag="SpellLike"/>
      <autotag group="Usage" tag="Day"/>
      <assignval field="livename" value="Summon (any demon or combination of demons whose total combined cr is 20 or lower 100%)"/>
      <assignval field="trkMax" value="1"/>
      </bootstrap>
    <bootstrap thing="xTelepathy">
      <assignval field="abValue" value="300"/>
      </bootstrap>
    </thing>
  <thing id="raCBAbyRes" name="Abyssal Resurrection" description="A demon lord rules an Abyssal realm, a vast world that not only serves as its home but provides it with power. If a demon lord is slain, its body rapidly melts into corruption (leaving behind any gear it held or carried), its soul returns to a hidden location within its realm, and it is immediately restored to life (as {i}true resurrection{/i}) at that location. Once this occurs, a demon lord can&apos;t use this ability again until a full year has passed. A demon lord realizes it is vulnerable during this time and usually doesn&apos;t risk further battles for the remainder of that year, relying on the defenses of its realm and its legions of minions to protect it. A demon lord that is slain again during this year or is killed by unusual methods (such as by a true deity or an artifact created for this purpose) is slain forever-its remains appearing somewhere deep in the Abyss among other dead demon lords from the ages. A demon lord who does not control a domain does not gain this ability." compset="RaceSpec" summary="If killed, resurrect self on home plane.">
    <fieldval field="trkMax" value="1"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="Usage" tag="Year"/>
    <tag group="User" tag="Tracker"/>
    <tag group="SpInfo" tag="spTrueRes9"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SpecType" tag="Defense"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="rauMCHvFor" name="Heavy Fortification" description="When a critical hit or sneak attack is scored on this creature there is a 75% chance that the critical hit or sneak attack is negated and damage is instead rolled normally." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Defense"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="rauMCLtFor" name="Light Fortification" description="When a critical hit or sneak attack is scored on this creature there is a 25% chance that the critical hit or sneak attack is negated and damage is instead rolled normally." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="SpecType" tag="Defense"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="raCBFragil" name="Fragile" description="When badly damaged this robot function poorly. A robot reduced to fewer than half its maximum hit points is staggered and moves at half speed. Further damage may cause the robot to explode." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="SpecType" tag="Weakness"/>
    </thing>
  </document>
